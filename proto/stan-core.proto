syntax = "proto3";

package stan.proto;
import "writer.proto";
import "logger.proto";
import "compile.proto";

/** 
 * Union-type message for holding other messages and simplifying packing
 * messages for serialization.  This design follows the 'union types' 
 * techniques suggestion from:
 * https://developers.google.com/protocol-buffers/docs/techniques
 */
message StanMessage {
  enum Type {
    UNKNOWN = 0;   // Default value in case of bad set value.
    EMPTY = 1;     // Indicates there is no message.
    MESSAGE = 2; // Any string-format message.
    COMPILE_REQUEST = 2;   // Request to compile a Stan program to C++
    COMPILE_RESPONSE = 3;  // Compilation request response, C++ code.
    PARAMETER_NAMES = 4;  // Parameter names.
    PARAMETER_VALUES = 5; // Single-iteration of parameter values
    STRING_OUTPUT = 5;    // Single string message.
    INTEGER_OUTPUT = 6;   // Single integer message.
    LOG = 7;
  }
  Type type = 1;  // Type of actual message held.
  int64 id = 2; // ID to associate message with (run id)
  string stan_message = 3;
  StanVersion stan_version = 4; 
  StanCompileRequest stan_compile_request = 5;   
  StanCompileResponse stan_compile_response = 6;
  StanParameterNames stan_parameter_names = 7;
  StanParameterVector stan_parameter_vector = 8;
  StanLogMessage stan_log_message = 9;
}

/** 
  * Version of the Stan components.  Used to indicate which version
  * produced/processed a message.
  */
message StanVersion {
  string version = 1;          // Version string.
  string stan_math_hash = 2;   // git hash from math library
  string stan_stan_hash = 3;   // git hash from language library
}



